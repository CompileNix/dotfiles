#!/usr/bin/zsh
# vim: sw=4 et

set -e

# we are expecting at least two arguments, else print help
if [[ "$1" =~ ^(--help|-h)$ ]] || [ ! -n "$1" ] || [ ! -n "$2" ]; then
    current_file_name="$(basename "$0")"
    # the following line (esp. `echo -e`) is required to make color codes work
    echo -e "$(cat << EOF
Generate SSHFP (SSH Fingerprint) DNS RR from a given base64
encoded ssh public key file.

Requirements:
- hostname
- openssl
- sha1sum
- which

Usage: ${Green}${current_file_name}${Color_Reset} ${Yellow}keytype${Color_Reset} ${Purple}keydata${Color_Reset} [${Bold_Blue}hostname${Color_Reset}]

${Yellow}keytype${Color_Reset}     One of the following options:
                ${Yellow}ssh-rsa${Color_Reset}
                ${Yellow}ssh-dsa${Color_Reset}
                ${Yellow}ecdsa-*${Color_Reset}
                ${Yellow}ssh-ed25519${Color_Reset}
                ${Yellow}ssh-ed448${Color_Reset}
${Purple}keydata${Color_Reset}     Base64 encoded key data.
${Bold_Blue}hostname${Color_Reset}    hostname to generate the DNS RR for, usually not a fqdn. Default
            value is ${Yellow}"${Purple}\$${Bold_Blue}(${Green}hostname${Color_Reset} -s${Bold_Blue})${Yellow}"${Color_Reset}.

Examples:
${Green}${current_file_name}${Color_Reset} ${Yellow}ssh-ed25519${Color_Reset} ${Purple}AAAAC3NzaC1lZDI1NTE5AAAAIKdid7enWOuT8g0Z69wDm2gDPGer/aCQKcPhVojoZdyI${Color_Reset}
${Green}${current_file_name}${Color_Reset} ${Yellow}ssh-ed25519${Color_Reset} ${Purple}AAAAC3NzaC1lZDI1NTE5AAAAIKdid7enWOuT8g0Z69wDm2gDPGer/aCQKcPhVojoZdyI${Color_Reset} ${Bold_Blue}hostname${Color_Reset}
EOF
)"
    exit 1
fi


keytype="$1"
keydata="$2"
hostname="$3"

if [ ! -n "$3" ]; then
    hostname="$(hostname -s)"
fi

# fallback to openssl if sha1sum or sha256sum is not present
if which openssl >/dev/null 2>&1; then
    if ! which sha1sum >/dev/null 2>&1; then
        sha1sum() {
            openssl dgst -sha1 | grep -E -o "[0-9a-f]{40}"
        }
    fi
    if ! which sha256sum >/dev/null 2>&1; then
        sha256sum() {
            openssl dgst -sha256 | grep -E -o "[0-9a-f]{64}"
        }
    fi
fi

case "$keytype"; in
ssh-rsa)
    echo "$hostname IN SSHFP 1 1 $(echo "$keydata" | base64 --decode | sha1sum  | cut -f 1 -d ' ')"
    echo "$hostname IN SSHFP 1 2 $(echo "$keydata" | base64 --decode | sha256sum  | cut -f 1 -d ' ')"
;;
ssh-dsa)
    echo "$hostname IN SSHFP 2 1 $(echo "$keydata" | base64 --decode | sha1sum  | cut -f 1 -d ' ')"
    echo "$hostname IN SSHFP 2 2 $(echo "$keydata" | base64 --decode | sha256sum  | cut -f 1 -d ' ')"
;;
ecdsa-*)
    echo "$hostname IN SSHFP 3 1 $(echo "$keydata" | base64 --decode | sha1sum  | cut -f 1 -d ' ')"
    echo "$hostname IN SSHFP 3 2 $(echo "$keydata" | base64 --decode | sha256sum  | cut -f 1 -d ' ')"
;;
ssh-ed25519)
    echo "$hostname IN SSHFP 4 1 $(echo "$keydata" | base64 --decode | sha1sum  | cut -f 1 -d ' ')"
    echo "$hostname IN SSHFP 4 2 $(echo "$keydata" | base64 --decode | sha256sum  | cut -f 1 -d ' ')"
;;
ssh-ed448)
    echo "$hostname IN SSHFP 6 1 $(echo "$keydata" | base64 --decode | sha1sum  | cut -f 1 -d ' ')"
    echo "$hostname IN SSHFP 6 2 $(echo "$keydata" | base64 --decode | sha256sum  | cut -f 1 -d ' ')"
;;
esac
